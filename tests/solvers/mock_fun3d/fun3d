#!/usr/bin/python

import sys
import argparse
from numpy import *
from mpi4py import MPI

parser = argparse.ArgumentParser()
parser.add_argument('--write_final_field', action='store_true')
parser.add_argument('--read_initial_field', action='store_true')
parser.add_argument('--ncyc', type=int)
parser.add_argument('--xmach', type=float)
args = parser.parse_args()

mpi_rank = MPI.COMM_WORLD.Get_rank()
mpi_size = MPI.COMM_WORLD.Get_size()
mpi_rank_p = (mpi_rank + 1) % mpi_size
mpi_rank_m = (mpi_rank + mpi_size - 1) % mpi_size

if args.read_initial_field:
    f = 'initial.data.{0}'.format(mpi_rank)
    x = array(frombuffer(open(f, 'rb').read(), dtype='>d'),
              dtype=float, order='C')

    assert x.size > 1
else:
    x = random.rand(10)

def extend(x):
    print(x)
    MPI.COMM_WORLD.Isend(x[-2:], mpi_rank_p)
    MPI.COMM_WORLD.Isend(x[:1], mpi_rank_m)
    x_extended = zeros(x.size + 3)
    x_extended[2:-1] = x
    MPI.COMM_WORLD.Recv(x_extended[:2], mpi_rank_m)
    MPI.COMM_WORLD.Recv(x_extended[-1:], mpi_rank_p)
    return x_extended

def print_cl_cd(x):
    sub_stats = array([x.size, x.sum(), (x**2).sum()])
    stats = empty(3)
    MPI.COMM_WORLD.Reduce(sub_stats, stats)
    if mpi_rank == 0:
        lift = stats[1] / stats[0]
        drag = stats[2] / stats[0]
        print("Lift {0} Drag {1}".format(lift, drag))

F = args.xmach + 8
dt = 0.01
for i in range(args.ncyc):
  
    
    x = extend(x)
    x_m2, x_m1, x, x_p1 = x[:-3], x[1:-2], x[2:-1], x[3:]
    dxdt = -x_m2 * x_m1 + x_m1 * x_p1 - x + F
    x += dt * dxdt
    print_cl_cd(x)
    
if args.write_final_field:
    with open('final.data.{0}'.format(mpi_rank), 'wb') as f:
        f.write(asarray(x, dtype='>d').tostring())

